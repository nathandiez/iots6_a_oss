---
# grafana.yml - Grafana dashboard deployment playbook
- name: Deploy and configure Grafana for IoT data visualization
  hosts: iot_servers
  vars:
    grafana_container_name: grafana
    grafana_data_dir: /home/{{ ansible_user | default('nathan') }}/grafana_data
    grafana_config_dir: /home/{{ ansible_user | default('nathan') }}/grafana_config
    grafana_port: 3000
    # Database connection details (matching your TimescaleDB setup)
    postgres_db: iotdb
    postgres_user: iotuser
    postgres_password: iotpass
    postgres_host: timescaledb  # Docker container name
    postgres_port: 5432

  tasks:
    # --------------------------------------------------------------------------
    # Setup Grafana Directories and Configuration
    # --------------------------------------------------------------------------
    - name: Create Grafana data directory
      ansible.builtin.file:
        path: "{{ grafana_data_dir }}"
        state: directory
        owner: "472"  # Grafana container user UID
        group: "472"  # Grafana container user GID
        mode: '0755'
      become: yes

    - name: Create Grafana config directory
      ansible.builtin.file:
        path: "{{ grafana_config_dir }}"
        state: directory
        mode: '0755'
      become: yes

    - name: Create Grafana datasource configuration
      ansible.builtin.copy:
        dest: "{{ grafana_config_dir }}/datasource.yml"
        content: |
          apiVersion: 1
          datasources:
            - name: TimescaleDB
              type: postgres
              access: proxy
              url: {{ postgres_host }}:{{ postgres_port }}
              database: {{ postgres_db }}
              user: {{ postgres_user }}
              secureJsonData:
                password: {{ postgres_password }}
              jsonData:
                sslmode: disable
                postgresVersion: 1400
                timescaledb: true
              isDefault: true
              editable: true
        mode: '0644'
      become: yes

    - name: Create basic Grafana configuration
      ansible.builtin.copy:
        dest: "{{ grafana_config_dir }}/grafana.ini"
        content: |
          [server]
          http_port = 3000
          root_url = http://localhost:3000

          [security]
          admin_user = admin
          admin_password = admin
          allow_embedding = true

          [auth.anonymous]
          enabled = false

          [log]
          mode = console
          level = info
        mode: '0644'
      become: yes

    # --------------------------------------------------------------------------
    # Create a Simple IoT Dashboard
    # --------------------------------------------------------------------------
    - name: Create dashboard provisioning directory
      ansible.builtin.file:
        path: "{{ grafana_config_dir }}/dashboards"
        state: directory
        mode: '0755'
      become: yes

    # Remove any existing broken dashboard files first
    - name: Remove any existing dashboard files
      ansible.builtin.file:
        path: "{{ grafana_config_dir }}/dashboards"
        state: absent
      become: yes

    - name: Recreate dashboard directory
      ansible.builtin.file:
        path: "{{ grafana_config_dir }}/dashboards"
        state: directory
        mode: '0755'
      become: yes

    - name: Create dashboard provisioning config
      ansible.builtin.copy:
        dest: "{{ grafana_config_dir }}/dashboard-provider.yml"
        content: |
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              updateIntervalSeconds: 10
              allowUiUpdates: true
              options:
                path: /etc/grafana/provisioning/dashboards
        mode: '0644'
      become: yes

    # Skip dashboard creation for now - let's get basic Grafana working first
    #     # Skip dashboard creation for now - we'll add it manually once basic setup works
    # This avoids JSON formatting issues during initial deployment

    # --------------------------------------------------------------------------
    # Deploy Grafana Docker Container
    # --------------------------------------------------------------------------
    - name: Pull Grafana Docker image
      community.docker.docker_image:
        name: grafana/grafana:latest
        source: pull
      become: yes

    - name: Start Grafana container
      community.docker.docker_container:
        name: "{{ grafana_container_name }}"
        image: grafana/grafana:latest
        state: started
        restart_policy: unless-stopped
        networks:
          - name: iot_network
        published_ports:
          - "{{ grafana_port }}:3000"
        volumes:
          - "{{ grafana_data_dir }}:/var/lib/grafana"
          - "{{ grafana_config_dir }}/grafana.ini:/etc/grafana/grafana.ini"
          - "{{ grafana_config_dir }}/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml"
          - "{{ grafana_config_dir }}/dashboard-provider.yml:/etc/grafana/provisioning/dashboards/dashboard-provider.yml"
          - "{{ grafana_config_dir }}/dashboards:/etc/grafana/provisioning/dashboards"
        env:
          GF_INSTALL_PLUGINS: ""
        restart: yes
      become: yes

    # --------------------------------------------------------------------------
    # Verification
    # --------------------------------------------------------------------------
    - name: Wait for Grafana to start
      ansible.builtin.pause:
        seconds: 10

    - name: Check if Grafana container is running
      community.docker.docker_container_info:
        name: "{{ grafana_container_name }}"
      register: container_info
      become: yes

    - name: Verify Grafana container state
      ansible.builtin.debug:
        msg: "Grafana container state: {{ container_info.container.State.Status }}"
      failed_when: container_info.container.State.Status != 'running'

    - name: Test Grafana HTTP endpoint (localhost)
      ansible.builtin.uri:
        url: "http://localhost:{{ grafana_port }}/api/health"
        method: GET
        timeout: 30
      register: grafana_health_local
      until: grafana_health_local.status == 200
      retries: 6
      delay: 10

    - name: Check if Grafana is listening on all interfaces
      ansible.builtin.shell: netstat -tlnp | grep :3000
      register: grafana_netstat
      become: yes

    - name: Display network binding info
      ansible.builtin.debug:
        msg: "Grafana network binding: {{ grafana_netstat.stdout_lines }}"

    - name: Test external access to Grafana
      ansible.builtin.uri:
        url: "http://{{ ansible_host }}:{{ grafana_port }}/api/health"
        method: GET
        timeout: 10
      register: grafana_health_external
      failed_when: false
      delegate_to: localhost

    - name: Display Grafana access information
      ansible.builtin.debug:
        msg: |
          ‚úÖ Grafana successfully deployed!
          üåê Access URL: http://{{ ansible_host }}:{{ grafana_port }}
          üë§ Username: admin
          üîë Password: admin
          üìä Default dashboard: IoT Overview Dashboard
          üîå Datasource: TimescaleDB (auto-configured)
          üîó External access: {{ 'Working' if grafana_health_external.status|default(0) == 200 else 'Check network/firewall' }}